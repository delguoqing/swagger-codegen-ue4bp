{{>licenseInfo}}
#pragma once

#include "{{modelNamePrefix}}BaseModel.h"
#include "{{classname}}.h"

{{#imports}}{{{import}}}
{{/imports}}

{{#operations}}
{{#operation}}
/* {{summary}}
{{#notes}} *
 * {{notes}}{{/notes}}
*/
class {{dllapi}} {{operationIdCamelCase}}Request : public FNetCodeRequest
{
public:
    virtual ~{{operationIdCamelCase}}Request() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest,  ESPMode::ThreadSafe>& HttpRequest) const;
	FString ComputePath() const;
    
	{{#allParams}}
	{{#isEnum}}
	{{#allowableValues}}
	enum class {{{enumName}}}
	{
		{{#enumVars}}
		{{name}},
		{{/enumVars}}
  	};
	{{/allowableValues}}
	{{#description}}/* {{{description}}} */
	{{/description}}{{^required}}TOptional<{{/required}}{{{datatypeWithEnum}}}{{^required}}>{{/required}} {{paramName}}{{#required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
	{{^isEnum}}
	{{#description}}/* {{{description}}} */
	{{/description}}{{^required}}TOptional<{{/required}}{{{dataType}}}{{^required}}>{{/required}} {{paramName}}{{#required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
    {{/allParams}}
};

class {{dllapi}} {{operationIdCamelCase}}Response : public FNetCodeResponse
{
public:
    virtual ~{{operationIdCamelCase}}Response() {}
	{{#responses.0}}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	{{/responses.0}}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    {{#returnType}}{{{returnType}}} Content;{{/returnType}}
};

{{/operation}}
{{/operations}}