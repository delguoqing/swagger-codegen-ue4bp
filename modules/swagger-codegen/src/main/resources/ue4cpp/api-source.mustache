{{>licenseInfo}}
#include "{{classFilename}}.h"

#include "{{classFilename}}Operations.h"
#include "{{unrealModuleName}}Module.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"
#include "SwaggerHelpers.h"

{{classname}}::{{classname}}() 
: Url(TEXT("{{basePath}}"))
{
}

{{classname}}::~{{classname}}() {}

void {{classname}}::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void {{classname}}::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void {{classname}}::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool {{classname}}::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("{{classname}}: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void {{classname}}::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, FSwaggerBaseResponse& InOutResponse) const
{
	InOutResponse.SetHttpResponse(HttpResponse);
	InOutResponse.SetSuccessful(bSucceeded);

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse.SetHttpResponseCode(HttpResponse->GetResponseCode());
		FString ContentType = HttpResponse->GetContentType();
		FString Content;

		// e.g. application/json; charset=utf8
		if (ContentType.StartsWith(TEXT("application/json")))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);

			TSharedPtr<FJsonValue> JsonValue;
			auto Reader = TJsonReaderFactory<>::Create(Content);

			if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
			{
				if (InOutResponse.FromJson(JsonValue))
					return; // Successfully parsed
			}
		}
		else if(ContentType.StartsWith(TEXT("text/plain")))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);
			return; // Successfully parsed
		}

		// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
		SwaggerCommon::LogDeserializeResponseError(HttpResponse, true);
		return;
	}

	// By default, assume we failed to establish connection
	InOutResponse.SetHttpResponseCode(EHttpResponseCodes::RequestTimeout);
}

{{#operations}}
{{#operation}}
bool {{classname}}::{{operationIdCamelCase}}(const F{{operationIdCamelCase}}Request& Request{{#responses}}, const F{{name}}Delegate& Delegate{{^isDefault}}{{code}}{{/isDefault}} /*= F{{name}}Delegate()*/{{/responses}}, const FSwaggerBaseResponseDelegate& OtherDelegate /*= FSwaggerBaseResponseDelegate()*/)
{
	if (!IsValid())
		return false;

	auto HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindUObject(this, &{{classname}}::On{{operationIdCamelCase}}Response{{#responses}}, Delegate{{^isDefault}}{{code}}{{/isDefault}}{{/responses}}, OtherDelegate);
	return HttpRequest->ProcessRequest();
}

void {{classname}}::On{{operationIdCamelCase}}Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded{{#responses}}, F{{name}}Delegate Delegate{{^isDefault}}{{code}}{{/isDefault}}{{/responses}}, FSwaggerBaseResponseDelegate OtherDelegate) const
{
	{{#responses}}
	F{{{name}}}Response Response{{^isDefault}}{{code}}{{/isDefault}};
	{{/responses}}

	switch (HttpResponse->GetResponseCode())
	{ 
	{{#responses}}
	case {{code}}:
		Response{{^isDefault}}{{code}}{{/isDefault}}.SetResponseString(TEXT("{{message}}"));
		HandleResponse(HttpResponse, bSucceeded, Response{{^isDefault}}{{code}}{{/isDefault}});
		Delegate{{^isDefault}}{{code}}{{/isDefault}}.ExecuteIfBound(Response{{^isDefault}}{{code}}{{/isDefault}});
		return;
	{{/responses}}
	}

	UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Encounter http error when requesting URL %s, Response Content (type:%s):\n%s"), *(HttpRequest->GetURL()), *(HttpResponse->GetContentType()), *(HttpResponse->GetContentAsString()));
	SwaggerCommon::LogHeaders(HttpResponse);
	FSwaggerBaseResponse OtherResponse;
	HandleResponse(HttpResponse, bSucceeded, OtherResponse);
	OtherDelegate.ExecuteIfBound(OtherResponse);
	return;
}

{{/operation}}
{{/operations}}