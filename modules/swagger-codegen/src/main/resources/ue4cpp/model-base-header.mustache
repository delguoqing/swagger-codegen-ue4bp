{{>licenseInfo}}
#pragma once

#include "CoreUObject.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"
#include "Serialization/JsonWriter.h"
#include "Dom/JsonObject.h"
#include "{{modelNamePrefix}}BaseModel.generated.h"

typedef TSharedRef<TJsonWriter<>> JsonWriter;

USTRUCT()
struct {{dllapi}} FNetCodeModel
{
	GENERATED_BODY()

public:
	virtual ~FNetCodeModel() {}
	virtual void WriteJson(JsonWriter& Writer) const = 0;
	virtual bool FromJson(const TSharedPtr<FJsonObject>& JsonObject) = 0;
};

USTRUCT()
struct {{dllapi}} FNetCodeRequest
{

	GENERATED_BODY()

public:
	virtual ~FNetCodeRequest() {}
	virtual void SetupHttpRequest(const TSharedRef<IHttpRequest, ESPMode::ThreadSafe>& HttpRequest) const = 0;
	virtual FString ComputePath() const = 0;
};

USTRUCT()
struct {{dllapi}} FNetCodeResponse
{

	GENERATED_BODY()

public:
	virtual ~FNetCodeResponse() {}
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) = 0;

	void SetSuccessful(bool InSuccessful) { Successful = InSuccessful; }
	bool IsSuccessful() const { return Successful; }

	virtual void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode);
	EHttpResponseCodes::Type GetHttpResponseCode() const { return ResponseCode; }

	void SetResponseString(const FString& InResponseString) { ResponseString = InResponseString; }
	const FString& GetResponseString() const { return ResponseString; }

	void SetHttpResponse(const FHttpResponsePtr& InHttpResponse) { HttpResponse = InHttpResponse; }
	const FHttpResponsePtr& GetHttpResponse() const { return HttpResponse; }

private:
	bool Successful;
	EHttpResponseCodes::Type ResponseCode;
	FString ResponseString;
	FHttpResponsePtr HttpResponse;
};