{{>licenseInfo}}
#pragma once

#include "CoreUObject.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"
#include "Serialization/JsonWriter.h"
#include "Dom/JsonObject.h"
#include "SwaggerBaseModel.generated.h"

typedef TSharedRef<TJsonWriter<>> JsonWriter;

USTRUCT()
struct SWAGGERCOMMON_API FSwaggerBaseModel
{
	GENERATED_BODY()
public:
	virtual ~FSwaggerBaseModel() {}
	virtual void WriteJson(JsonWriter& Writer) const {}
	virtual bool FromJson(const TSharedPtr<FJsonObject>& JsonObject) { return false; }
};

USTRUCT(BlueprintType)
struct SWAGGERCOMMON_API FSwaggerBaseRequest
{
	GENERATED_BODY()
public:
	virtual ~FSwaggerBaseRequest() {}
	virtual void SetupHttpRequest(const TSharedRef<IHttpRequest, ESPMode::ThreadSafe>& HttpRequest) const {}
	virtual FString ComputePath() { return FString(); }
};

USTRUCT(BlueprintType)
struct SWAGGERCOMMON_API FSwaggerBaseResponse
{
	GENERATED_BODY()
public:
	virtual ~FSwaggerBaseResponse() {}
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) { return false; }

	void SetSuccessful(bool InSuccessful) { Successful = InSuccessful; }
	bool IsSuccessful() const { return Successful; }

	virtual void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode);
	EHttpResponseCodes::Type GetHttpResponseCode() const { return (EHttpResponseCodes::Type)ResponseCode; }

	void SetResponseString(const FString& InResponseString) { ResponseString = InResponseString; }
	const FString& GetResponseString() const { return ResponseString; }

	void SetHttpResponse(const FHttpResponsePtr& InHttpResponse) { HttpResponse = InHttpResponse; }
	const FHttpResponsePtr& GetHttpResponse() const { return HttpResponse; }

	FString GetHeader(const FString& HeaderName) const
	{
		if (HttpResponse == nullptr)
			return FString();
		return HttpResponse->GetHeader(HeaderName);
	}
	
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	bool Successful;
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	int32 ResponseCode;
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	FString ResponseString;

	FHttpResponsePtr HttpResponse;
};