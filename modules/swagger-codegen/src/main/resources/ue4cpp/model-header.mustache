{{>licenseInfo}}
#pragma once

#include "CoreUObject.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "SwaggerBaseModel.h"
{{#imports}}{{{import}}}
{{/imports}}


{{#models}}
{{#model}}
#include "{{classFilename}}.generated.h"
/*
 * {{classname}}
 *
 * {{description}}
 */
USTRUCT(BlueprintType, Category={{unrealModuleName}}, meta=(DisplayName="{{name}}", HasNativeBreak="{{unrealModuleName}}.{{classname}}HelperLibrary.Break", HasNativeMake="{{unrealModuleName}}.{{classname}}HelperLibrary.Make"))
struct {{dllapi}} {{classname}} : public FSwaggerBaseModel
{

	GENERATED_BODY()

public:
    virtual ~{{classname}}() {}
	bool FromJson(const TSharedPtr<FJsonObject>& JsonObject) final;
	void WriteJson(JsonWriter& Writer) const final;

    {{#vars}}
	{{#isEnum}}
	{{#allowableValues}}
	enum class {{{enumName}}}
	{
		{{#enumVars}}
		{{name}},
		{{/enumVars}}
  	};
	{{/allowableValues}}
	{{#description}}/* {{{description}}} */
	{{/description}}{{^required}}TOptional<{{/required}}{{{datatypeWithEnum}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
	{{^isEnum}}
	{{#description}}/* {{{description}}} */
	{{/description}}UPROPERTY(BlueprintReadWrite, EditAnywhere{{#description}}, Meta=(ToolTip="{{{description}}}"){{/description}})
	{{^required}}TOptional<{{/required}}{{{datatype}}}{{^required}}>{{/required}} {{name}}{{#required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
    {{/vars}}
};

UCLASS(NotBlueprintType)
class U{{classname}}HelperLibrary : public UBlueprintFunctionLibrary
{
	GENERATED_BODY()
public:
	/**
	* Make {{name}} Struct
	{{#vars}}{{#description}}* @param {{name}} - {{{description}}}
	{{/description}}{{/vars}}*/
	UFUNCTION(BlueprintPure, Category = "{{unrealModuleName}}", meta = (BlueprintThreadSafe, DisplayName="Make {{name}} Struct"))
	static {{classname}} Make({{#vars}}{{datatype}} {{name}}{{#hasMore}}, {{/hasMore}}{{/vars}});
	/**
	* Break {{name}} Struct
	{{#vars}}{{#description}}* @param {{name}} - {{{description}}}
	{{/description}}{{/vars}}*/
	UFUNCTION(BlueprintPure, Category = "{{unrealModuleName}}", meta = (BlueprintThreadSafe, DisplayName="Break {{name}} Struct"))
	static void Break(const {{classname}}& {{classVarName}}{{#vars}}, {{datatype}}& {{name}}{{/vars}});
};
{{/model}}
{{/models}}