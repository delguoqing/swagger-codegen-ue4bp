{{>licenseInfo}}
#pragma once

#include "CoreMinimal.h"
#include "SwaggerBaseModel.h"
#include "{{classFilename}}Operations.h"
#include "{{unrealModuleName}}Responses.h"
#include "{{classFilename}}.generated.h"

UCLASS(BlueprintType, Category="{{unrealModuleName}}")
class {{dllapi}} {{classname}}: public UObject
{
	GENERATED_BODY()
public:
	{{classname}}();
	~{{classname}}();

	UFUNCTION(BlueprintCallable)
	void SetURL(const FString& Url);
	UFUNCTION(BlueprintCallable)
	void AddHeaderParam(const FString& Key, const FString& Value);
	UFUNCTION(BlueprintCallable)
	void ClearHeaderParams();

    {{#operations}}{{#operation}}{{#description}}/* {{{description}}} */
	{{/description}}UFUNCTION(BlueprintCallable, Meta=(BlueprintPure=false, DisplayName="{{nickname}}"))
	bool {{operationIdCamelCase}}(const F{{operationIdCamelCase}}Request& Request{{#responses}}, const F{{{name}}}Delegate& Delegate{{^isDefault}}{{code}}{{/isDefault}}{{/responses}});
    {{/operation}}{{/operations}}
private:
    {{#operations}}{{#operation}}void On{{operationIdCamelCase}}Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded{{#responses}}, F{{{name}}}Delegate Delegate{{^isDefault}}{{code}}{{/isDefault}}{{/responses}}) const;
    {{/operation}}{{/operations}}
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, FSwaggerBaseResponse& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
};